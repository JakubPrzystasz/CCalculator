import java.util.ArrayList;

public class Calculator {

    private class operator_ {
        int priority;

        public int getPriority() {
            return priority;
        }

        public void setPriority(int priority) {
            this.priority = priority;
        }
    };

    private operator_ setOperator(String str) {
        //USTAL PRIORYTET OPERATORA
        operator_ oper = new operator_();
        if (str == "(") {
            oper.setPriority(0);
        }
        if (str == "+" || str == "-" || str == ")") {
            oper.setPriority(1);
        }
        if (str == "*" || str == "/" || str == "%") {
            oper.setPriority(2);
        }
        if (str == "^" || str == "&") {
            oper.setPriority(3);
        }
        return oper;
    };

    private boolean is_num(String exp) {
        //SPRAWDZ CZY DANY ZNAK JEST LICZBA
        int i = 0, c1, c2;
        boolean flag = false;
        for (i = 0; i < exp.length(); i++) {
            c1 = (int)exp.charAt(i);
            if(i+1<exp.length()) {
                c2 = (int)exp.charAt(i + 1);
            }else {
                c2 = 0;
            }
            //   zakladam ze to int    // zakladam ze to float 2.2           // .2
            if ((c1 >= 48 && c1 <= 57)
                    || ((c1 >= 48 && c1 <= 57 && c2 == 46)
                    || (c2 >= 48 && c2 <= 57 && c1 == 46))) {
                flag = true;
            } else {
                break;
            }
        }
        return flag;
    }

    private double modulo(double x, double y) {
        //OBLICZANIE MODULO
        double m = Math.floor(x / y);
        double r = m * y;
        return x - r;
    }

    private ArrayList<String> addToArray(String str, ArrayList<String> array, int i) {
        //DODAJ ZMIENNA DO TABLICY
        ArrayList<String> temp = new ArrayList<String>();
        int z;
        for (z = 0; z < i; z++) {
            temp.add(array.get(z));
            //WRZUC WSZYSTKO DO TYMCZASOWEJ TABLICY PRZED MIEJSCEM DO DODANIA
        }
        temp.add(str);
        //DODAJ ELEMENT
        for (; z < array.size(); z++) {
            temp.add(array.get(z));
            //WRZUC RESZTE TABLICY ZA NOWY ELEMENT
        }
        return temp;
    }

    private ArrayList<String> convertToArray(String exp){
        ArrayList<String> array = new ArrayList<String>();
        String temp = null;
        int i, c1, c2;
        for (i = 0; i < exp.length(); i++) {
            c1 = (int)exp.charAt(i);
            if(i+1<exp.length()) {
                c2 = (int)exp.charAt(i + 1);
            }else {
                c2 = 0;
            }
            //minus przed wyrazeniem -a+a -> 0-a+a
            if (i == 0 && exp.charAt(i) == '-') {
                array.add("0");
                array.add("-");
            }
            //sprawdz czy znak jest cyfra
            else if (c1 >= 48 && c1 <= 57) {
                temp = String.valueOf(exp.charAt(i));
            }
            //znak jest kropka w liczbie zmiennoprzecinkowej
            else if (c1 == 46 && c2 >= 48 && c2 <= 57) {
                if (temp == "") {
                    //gdyby ktos napisal .222 popraw na 0.2222
                    temp = "0";
                }
                temp = String.valueOf(exp.charAt(i));
            } else {
                if (!temp.equals(null)) {
                    array.add(temp);
                }
                temp = String.valueOf(exp.charAt(i));
                if (temp != ".") {
                    array.add(temp);
                }
                temp = "";
                //jesli wystapi cos takiego : (-a-a) wstaw zero -> (0-a-a)
                if (c1 == 40 && c2 == 45) {
                    array.add("0");
                }
            }
        }

        //wrzuc to co zostalo w temp do tablicy
        if (!temp.equals(null)) {
            array.add(temp);
        }

        for (i = 0; i+1 < array.size(); i++) {
            if (is_num(array.get(i)) && array.get(i+1) == "(") {
                //wrzuc * pomiedzy liczbe i nawias
                array = addToArray("*", array, i);
            }
        }
        // *DEBUG* pokaz tablice *DEBUG*
        //		 for (i = 0; i < array.size(); i++) {
        //		 	System.out.print(" "+array.get(i)+" ");
        //		 }
        //		 System.out.println("("+array.size()+")");
        //		 System.out.print('\n');
        // *DEBUG*     *DEBUG*   *DEBUG*
        return array;
    }

    ArrayList<String> convertToRNP(ArrayList<String> array) {
        /* ***konwertuj do odwrotnej notacji polskiej*** */
        ArrayList<String> stack = new ArrayList<String>();
        ArrayList<String> rnp = new ArrayList<String>();
        int i;
        String temp, temp2;
        for (i = 0; i < array.size(); i++) {
            temp = array.get(i);
            if (is_num(temp) == true) {
                //jest liczba wrzuc ja na wyjscie
                rnp.add(temp);
                continue;
            } else if (temp == "(") {
                stack.add(temp);
                continue;
            } else if (temp == ")") {
                while (stack.size() > 0) {
                    temp2 = stack.get(stack.size()-1);
                    stack.remove(stack.size()-1);
                    if (temp2 == "(") {
                        break;
                    } else {
                        rnp.add(temp2);
                    }
                }
                continue;
            } else {
                //to jest operator lub funkcja
                //stos jest pusty dopisz operator na stos
                if (stack.size() < 1) {
                    stack.add(temp);
                    continue;
                } else {
                    //stos nie jest pusty ustal priorytet
                    //dla operatora wczytywanego oraz tego na wierzchołku stosu
                    //cur obecnie wczytany, tos - operator ze szczytu stosu
                    operator_ cur, tos;
                    cur = setOperator(temp);
                    tos = setOperator(stack.get(stack.size()-1));
                    if (cur.priority > tos.priority) {
                        //priorytet operatora wczytywanego jest wyższy od priorytetu operatora znajdującego się w wierzchołku stosu
                        stack.add(temp);
                    } else {
                        while (stack.size() > 0) {
                            temp2 = stack.get(stack.size()-1);
                            tos = setOperator(temp2);
                            if (tos.priority >= cur.priority) {
                                rnp.add(temp2);
                                stack.remove(stack.size()-1);
                            } else {
                                break;
                            }
                        }
                        //po czym wpisz operator do stosu
                        stack.add(temp);
                    }
                }
            }
        }

        //zdejmij operatory ze stosu i przeslij na wyjscie
        while (stack.size() > 0) {
            temp = stack.get(stack.size()-1);
            stack.remove(stack.size()-1);
            rnp.add(temp);
        }
        // ***DEBUG*** wyswietl przetworzone wyrazenie ***DEBUG***
//			 System.out.println("RNP: ");
//			 for (i = 0; i < rnp.size(); i++) {
//				 System.out.print(rnp.get(i)+" ");
//			 }
//			 System.out.println(" ("+rnp.size()+") ");
//			 System.out.print("\n");
        // ***DEBUG*** ***DEBUG***         ***DEBUG*** ***DEBUG***
        return rnp;
    }

    private double compute(ArrayList<String> array) {
        //oblicz wynik na podstawnie wyrazenie w odwrotnej notacyi polskiej (RNP)
        ArrayList<Double> stack = new ArrayList<Double>();
        int i;
        String str, str2;
        for (i = 0; i < array.size(); i++) {
            str = array.get(i);
            double a, b, result;
            if (is_num(str) == true) {
                //jest liczba odloz na stos
                a = Character.getNumericValue(str.charAt(0));
                stack.add(a);
            } else {
                a = stack.get(stack.size()-1);
                stack.remove(stack.size()-1);
                b = stack.get(stack.size()-1);
                stack.remove(stack.size()-1);
                result = 0;
                if (str.equals("+")) {
                    result = b + a;
                }
                if (str.equals("-")) {
                    result = b - a;
                }
                if (str.equals("*")) {
                    result = b * a;
                }
                if (str.equals("/")) {
                    result = b / a;
                }
                if (str.equals("^")) {
                    result = Math.pow(b, a);
                }
                if (str.equals("%")) {
                    result = modulo(b, a);
                }
                if (str.equals("&")) {
                    result = Math.pow(a, (1 / b));
                }
                stack.add(result);
            }
        }

        // DEBUG
//		System.out.print('\n');
//		for(i=0;i<stack.size();i++)
//		{
//			System.out.print(stack.get(i)+" ");
//		}
//		System.out.print('\n');
//      System.out.println("SIZE: "+stack.size());
        // DEBUG
        return stack.get(0);
    }

    public double calculate(String exp) {
        ArrayList<String> array = this.convertToArray(exp);
        array = this.convertToRNP(array);
        return this.compute(array);
    }

}
